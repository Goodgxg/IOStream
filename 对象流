对象流：最主要就是对对象进行序列化和反序列化
序列化：我们直到对象实例化之后是存在内存当中的，序列化就是将内存中的对象，以文件的形式保存到磁盘当中，是此案对象的持久化操作
反序列化：就是序列化相反的操作，将序列化的文件，读取到内存当中，使其成为内存当中的一个对象。

对象流：ObjectStream，序列化和反序列化，需要用到对象流（ObjectInputStream，ObjectOutputStream）

我们来看下实例：

import java.io.*;

public class ObjectStreamDemo {
	public static void main(String[] args) {
		Person p=new Person();
		p.age=10;
		p.name="xm";
		saveObject(p);
		getObject();
		
	}
	public static void saveObject(Person p) {
		//实例化一个ObjectStream
		try(ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream("src\\b"))){
			oos.writeObject(p);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public static void getObject() {
		try(ObjectInputStream ois=new ObjectInputStream(new FileInputStream("src\\b"))){
			Object obj=ois.readObject();
			System.out.println(obj.toString());
		}  catch (IOException|ClassNotFoundException e) {
			
			e.printStackTrace();
		} 
	}
}
class Person implements Serializable{
	private static final long serialVersionUID = 1L;
	public String name;
	public int age;
	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + "]";
	}
}

只是简单的实例，如果存储多个对象的话：重构saveObject()方法如下：
需要注意的是：要序列化的类要实现Serializable这个接口
public static void saveObject(ArrayList<Person> list) {
		//实例化一个ObjectStream
		try(ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream("src\\b"))){
			oos.writeObject(list);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
